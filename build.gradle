buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'org.ajoberstar:gradle-git:1.3.2'
	}
}

import nl.idgis.gradle.play.PlayJavaPlugin
import nl.idgis.gradle.docker.DockerPlugin

subprojects {
	apply plugin: 'org.ajoberstar.release-opinion'
	
	repositories {
		mavenCentral ()
		
		// Add IDgis repositories:
		maven {
			name "idgis-public"
			url "http://nexus.idgis.eu/content/groups/public/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
		maven {
			name "idgis-restricted"
			url "http://nexus.idgis.eu/content/groups/restricted/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
	}
	
	// Configure gradle-git release procedure (https://github.com/ajoberstar/gradle-git):
	release {
		grgit = org.ajoberstar.grgit.Grgit.open (file (".."))
	}
}

project(':kernkwaliteitenviewer') {
	
	apply plugin: 'eclipse'
	apply plugin: PlayJavaPlugin
	apply plugin: DockerPlugin
	
	repositories {
		ivy {
			name "typesafe-ivy-release"
			url "https://repo.typesafe.com/typesafe/ivy-releases"
			layout "ivy"
		}
	}
	
	dependencies {
		// Play default dependencies (Scala version 2.11):
		play "com.typesafe.play:play-java-jdbc_2.11:2.4.3"			// javaJdbc
		play "com.typesafe.play:play-cache_2.11:2.4.3"				// cache
		play "com.typesafe.play:play-java-ws_2.11:2.4.3"			// javaWs
		play "com.typesafe.play:play-jdbc-evolutions_2.11:2.4.3"	// evolutions
		
		// Geoportaal dependencies:
		play "org.webjars:webjars-locator:0.32"
		play "org.webjars:dojo:1.10.4"
		play "org.webjars:bootstrap:3.3.6"
		play "org.postgresql:postgresql:9.4-1206-jdbc42"
		play "org.webjars:openlayers:3.16.0"
	}
	
	model {
		components {
			play {
				platform play: '2.4.3', java: '1.8'
				
				// The injected routes generator is required to be compatible with
				// Play version 2.4 and up. 
				injectedRoutesGenerator = true
			}
		}
		
		distributions {
			 playBinary {
				tasks.withType(org.gradle.jvm.tasks.Jar) {
					manifest {
						attributes("Implementation-Title": project.name)
						if(project.version) {
							attributes("Implementation-Version": project.version)
						}
					}
				}
			 }
		}
	}
}

// configure docker plugin
allprojects {
	afterEvaluate { project ->
		if(project.plugins.hasPlugin('com.bmuschko.docker-remote-api')) {
			docker {
				url = "http://${dockerHost}:2375"
			}
		}
	}
}